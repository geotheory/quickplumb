% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bool_filter.R
\name{bool_filter}
\alias{bool_filter}
\title{Boolean search filtering}
\usage{
bool_filter(db_tbl, col, qry, case_sens = FALSE, print_call = FALSE)
}
\arguments{
\item{db_tbl}{response variables - a special argument for the names of fields to include/omit in the response. e.g. return only "resp_vars=Species,Sepal.Length" or omit "resp_vars=-Species"}

\item{col}{variables to sort response by - e.g. "sort_vars=Species,Sepal.Length" (mutiple variables) or "sort_vars=-Petal.Length" (reverse order)}

\item{qry}{Maximum data rows to return}

\item{print_call}{Maximum data rows to return}
}
\description{
A function to filter a data.frame, tibble or dplyr database connection table using boolean logical queries
}
\examples{
# Examples showing equivalent operations using dplyr::filter and stringr::str_detect

# Simple match

bool_filter(iris, 'Species', 'set')
# iris \%>\% filter(str_detect(Species, 'set'))

# AND query

bool_filter(iris, 'Species', 'vir AND ver')
# iris \%>\% filter(str_detect(Species, 'vir') & str_detect(Species, 'ver'))

# OR query

bool_filter(iris, 'Species', 'vir OR ver')
# iris \%>\% filter(str_detect(Species, 'vir') | str_detect(Species, 'ver'))

# NOT query

bool_filter(iris, 'Species', '-set')
# iris \%>\% filter(!str_detect(Species, 'set'))

# Note piping is not yet supported, so the following will fail:
iris \%>\% bool_filter('Species', 'set')
}
